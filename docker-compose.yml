services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "8080:80"  # 监听端口映射
    environment:
      - VITE_API_BASE_URL=http://backend:8000
      - VITE_SILICONFLOW_API_URL=${SILICONFLOW_API_URL}
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # MongoDB 数据库服务
  mongodb:
    build:
      context: ./mongodb
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=
      - MONGO_INITDB_ROOT_PASSWORD=
      - MONGO_INITDB_DATABASE=ai_novel_db
    networks:
      - app-network
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis 缓存服务
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-Lekairong350702}
    networks:
      - app-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "3000:8000"  # 开发端口映射
    environment:
      # 使用本地容器服务，生产环境时会被覆盖
      - MONGODB_URL=mongodb://${MONGODB_HOST:-mongodb}:${MONGODB_PORT:-27017}/${MONGODB_DATABASE:-ai_novel_db}
      - DATABASE_SYSTEM_URL=mysql+aiomysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_SYSTEMHOST:-172.16.16.3}:3306/${DATABASE_SYSTEM}
      - DATABASE_NOVEL_URL=mysql+aiomysql://${DATABASE_NOVELUSER}:${DATABASE_NOVELUSER_PASSWORD}@${DATABASE_NOVELHOST:-172.16.16.2}:3306/${DATABASE_NOVELDATA}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-Lekairong350702}@${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - SILICONFLOW_API_KEY=${SILICONFLOW_API_KEY}
      - SILICONFLOW_DEFAULT_MODEL=${SILICONFLOW_DEFAULT_MODEL}
      - SILICONFLOW_API_URL=${SILICONFLOW_API_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=http://localhost:80,http://127.0.0.1:80,http://localhost:8080,http://127.0.0.1:8080,http://${SERVER_IP}:80,http://${SERVER_IP}:8080
      - MCP_SERVER_NAME=${MCP_SERVER_NAME}
      - MCP_SERVER_PORT=${MCP_SERVER_PORT}
      - MCP_SERVER_HOST=${MCP_SERVER_HOST}
      - MCP_TOOLS_ENABLED=${MCP_TOOLS_ENABLED}
      - MCP_TOOLS_LIST=${MCP_TOOLS_LIST}
      - NOVEL_GENERATION_MAX_TOKENS=${NOVEL_GENERATION_MAX_TOKENS}
      - NOVEL_GENERATION_TEMPERATURE=${NOVEL_GENERATION_TEMPERATURE}
      - NOVEL_GENERATION_TOP_P=${NOVEL_GENERATION_TOP_P}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    extra_hosts:
      - "mysql-system:172.16.16.3"
      - "mysql-user:172.16.16.2"
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
