name: Deploy to Baidu Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        SILICONFLOW_API_KEY: ${{ secrets.SILICONFLOW_API_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} '
          # 项目部署目录
          PROJECT_DIR="/opt/ai-novel-editor"
          
          # 创建项目目录
          sudo mkdir -p $PROJECT_DIR
          sudo chown $USER:$USER $PROJECT_DIR
          
          # 进入项目目录
          cd $PROJECT_DIR
          
          # 克隆或更新代码
          if [ -d ".git" ]; then
            echo "📦 更新代码..."
            git pull origin main
          else
            echo "📦 克隆代码..."
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # 创建环境变量文件
          cat > .env << EOF
          SILICONFLOW_API_KEY=${{ secrets.SILICONFLOW_API_KEY }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=3306
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=ai_novel_cloud
          EOF
          
          # 设置脚本权限
          chmod +x scripts/deploy.sh
          
          # 执行部署脚本
          ./scripts/deploy.sh
          
          # 检查服务状态
          echo "🔍 检查服务状态..."
          docker-compose ps
          
          echo "🎉 部署完成！"
        '
        
    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ secrets.DEPLOY_HOST }}:80 || exit 1
        curl -f http://${{ secrets.DEPLOY_HOST }}:8000/health || exit 1
        echo "✅ 服务健康检查通过"
