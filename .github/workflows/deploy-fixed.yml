name: Deploy AI Novel Editor (Clone Mode)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_NAME: ai-novel-editor
  DEPLOY_DIR: /opt/ai-novel-editor

jobs:
  # 快速部署 (克隆模式)
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
        
    - name: Add server to known hosts
      run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
    
    - name: Pre-check Docker Hub connectivity
      run: |
        echo "🔍 检查 Docker Hub 连接性..."
        if curl -s --connect-timeout 10 https://registry-1.docker.io/v2/ > /dev/null; then
          echo "✅ Docker Hub 可访问"
        else
          echo "⚠️  Docker Hub 访问受限，部署脚本将配置镜像加速器"
        fi
        
    - name: Deploy to production server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SILICONFLOW_API_KEY: ${{ secrets.SILICONFLOW_API_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      run: |
        # 上传部署相关脚本
        scp scripts/quick-deploy.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/
        scp scripts/check-docker-images.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/
        scp scripts/docker-image-alternatives.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/
        
        # 执行部署
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
          "export SERVER_IP=\"$SERVER_IP\" && \
           export SILICONFLOW_API_KEY=\"$SILICONFLOW_API_KEY\" && \
           export JWT_SECRET_KEY=\"$JWT_SECRET_KEY\" && \
           export REDIS_PASSWORD=\"$REDIS_PASSWORD\" && \
           export DATABASE_PASSWORD=\"\${DATABASE_PASSWORD:-Lekairong350702}\" && \
           export DATABASE_NOVELUSER_PASSWORD=\"\${DATABASE_NOVELUSER_PASSWORD:-Lekairong350702}\" && \
           export GITHUB_REPOSITORY=\"${{ github.repository }}\" && \
           chmod +x /tmp/quick-deploy.sh /tmp/check-docker-images.sh && \
           echo '🔍 预检查 Docker 镜像可用性...' && \
           /tmp/check-docker-images.sh || echo '⚠️  镜像检查发现问题，部署脚本将尝试解决' && \
           echo '🚀 开始部署...' && \
           /tmp/quick-deploy.sh"

    - name: Verify deployment
      run: |
        echo "🔍 验证部署状态..."
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
          "curl -f http://localhost:8000/health && \
           echo '✅ 后端服务正常' || echo '❌ 后端服务异常'"
        
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
          "curl -f http://localhost:80 && \
           echo '✅ 前端服务正常' || echo '❌ 前端服务异常'"

  # 部署状态通知 (可选)
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 部署成功！"
          echo "📍 访问地址: http://${{ secrets.SERVER_IP }}"
        else
          echo "❌ 部署失败，请检查日志"
        fi
