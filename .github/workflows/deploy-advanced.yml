name: Deploy AI Novel Editor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_NAME: ai-novel-editor
  DEPLOY_DIR: /opt/ai-novel-editor

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run Python linting
      run: |
        cd backend
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

  # 构建测试
  build:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install docker-compose
      run: sudo apt-get update && sudo apt-get install -y docker-compose
      
    - name: Create test environment file
      run: |
        cat > .env << EOF
        # 云数据库配置 - 使用内网 IP
        MONGODB_HOST=172.16.32.2
        MONGODB_PORT=27017
        MONGODB_DATABASE=ai_novel_db
        REDIS_HOST=172.16.32.2
        REDIS_PORT=6379
        REDIS_PASSWORD=Lekairong350702
        # AI 服务配置
        SILICONFLOW_API_KEY=sk-test-key
        JWT_SECRET_KEY=test-jwt-secret-key
        # MySQL 数据库配置
        DATABASE_SYSTEMHOST=172.16.16.3
        DATABASE_SYSTEM=novel_data
        DATABASE_USER=lkr
        DATABASE_PASSWORD=Lekairong350702
        DATABASE_NOVELHOST=172.16.16.2
        DATABASE_NOVELDATA=novel_user_data
        DATABASE_NOVELUSER=novel_data_user
        DATABASE_NOVELUSER_PASSWORD=Lekairong350702
        # 服务配置
        SERVER_IP=localhost
        MCP_SERVER_NAME=novel-ai-server
        MCP_SERVER_PORT=8000
        MCP_SERVER_HOST=localhost
        MCP_TOOLS_ENABLED=true
        MCP_TOOLS_LIST=novel_generation,character_creation,plot_analysis,content_review,style_transfer
        NOVEL_GENERATION_MAX_TOKENS=4096
        NOVEL_GENERATION_TEMPERATURE=0.8
        NOVEL_GENERATION_TOP_P=0.9
        SILICONFLOW_DEFAULT_MODEL=deepseek-ai/DeepSeek-V3
        SILICONFLOW_API_URL=https://api.siliconflow.cn/v1/chat/completions
        EOF
      
    - name: 提升 MongoDB vm.max_map_count 参数
      run: sudo sysctl -w vm.max_map_count=1677720
      
    - name: Build Docker images
      run: docker-compose build --no-cache
        
    - name: Test Docker containers
      run: |
        echo "🚀 启动Docker服务..."
        docker-compose up -d
        
        echo "⏳ 等待后端容器启动..."
        sleep 60
        
        echo "🔍 检查容器状态..."
        docker-compose ps
        
        echo "📋 检查后端容器日志..."
        docker-compose logs --tail=30 backend
        
        echo "🏥 执行后端健康检查..."
        for i in {1..12}; do
          echo "尝试第 $i 次后端健康检查..."
          if curl -f http://localhost:8000/health; then
            echo "✅ 后端健康检查成功"
            break
          else
            echo "❌ 后端健康检查失败，等待15秒后重试..."
            if [ $i -eq 1 ] || [ $i -eq 6 ] || [ $i -eq 12 ]; then
              echo "📋 检查系统参数 vm.max_map_count..."
              sysctl vm.max_map_count
              echo "📋 检查容器状态..."
              docker-compose ps
              echo "📋 检查后端容器日志..."
              docker-compose logs --tail=30 backend
              echo "📋 检查网络连接状态..."
              
              # 检查 MongoDB 连接
              echo "🔍 测试 MongoDB 连接 (172.16.32.2:27017)..."
              if docker-compose exec backend ping -c 3 172.16.32.2; then
                echo "✅ MongoDB 服务器网络可达"
                if docker-compose exec backend timeout 10 bash -c "echo > /dev/tcp/172.16.32.2/27017"; then
                  echo "✅ MongoDB 端口 27017 可连接"
                else
                  echo "❌ MongoDB 端口 27017 连接失败 - 可能是防火墙或服务未启动"
                fi
              else
                echo "❌ MongoDB 服务器网络不可达 - 检查网络路由"
              fi
              
              # 检查 Redis 连接
              echo "🔍 测试 Redis 连接 (172.16.32.2:6379)..."
              if docker-compose exec backend timeout 10 bash -c "echo > /dev/tcp/172.16.32.2/6379"; then
                echo "✅ Redis 端口 6379 可连接"
              else
                echo "❌ Redis 端口 6379 连接失败"
              fi
              
              # 检查 MySQL 连接
              echo "🔍 测试 MySQL 系统库连接 (172.16.16.3:3306)..."
              if docker-compose exec backend timeout 10 bash -c "echo > /dev/tcp/172.16.16.3/3306"; then
                echo "✅ MySQL 系统库端口 3306 可连接"
              else
                echo "❌ MySQL 系统库端口 3306 连接失败"
              fi
              
              echo "🔍 测试 MySQL 用户库连接 (172.16.16.2:3306)..."
              if docker-compose exec backend timeout 10 bash -c "echo > /dev/tcp/172.16.16.2/3306"; then
                echo "✅ MySQL 用户库端口 3306 可连接"
              else
                echo "❌ MySQL 用户库端口 3306 连接失败"
              fi
              
              # 检查环境变量
              echo "📋 检查数据库连接环境变量..."
              docker-compose exec backend env | grep -E "(MONGODB|REDIS|DATABASE)" || echo "环境变量检查失败"
            fi
            sleep 15
          fi
          
          if [ $i -eq 12 ]; then
            echo "❌ 后端健康检查最终失败，输出详细诊断信息..."
            echo "=== 容器状态 ==="
            docker-compose ps
            echo "=== 后端容器完整日志 ==="
            docker-compose logs backend
            echo "=== 前端容器日志 ==="
            docker-compose logs frontend
            echo "=== Docker 网络信息 ==="
            docker network ls
            docker network inspect $(docker-compose exec backend cat /proc/1/cgroup | head -1 | cut -d/ -f3 | cut -c1-12)_app-network 2>/dev/null || echo "网络检查失败"
            exit 1
          fi
        done
        
        echo "🛑 停止测试容器..."
        docker-compose down

  # 部署到生产环境
  deploy:
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
        
    - name: Add server to known hosts
      run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        
    - name: Deploy to production server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SILICONFLOW_API_KEY: ${{ secrets.SILICONFLOW_API_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_CUSTOM }}
      run: |
        # 创建部署脚本
        cat > deploy_script.sh << 'SCRIPT_EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 开始部署AI小说编辑器..."
        
        # 设置部署目录
        PROJECT_DIR="/opt/ai-novel-editor"
        BACKUP_DIR="/opt/backups/ai-novel-editor-$(date +%Y%m%d_%H%M%S)"
        
        # 创建目录
        sudo mkdir -p "$PROJECT_DIR"
        sudo mkdir -p "$(dirname "$BACKUP_DIR")"
        sudo chown $USER:$USER "$PROJECT_DIR"
        sudo chown $USER:$USER "$(dirname "$BACKUP_DIR")"
        
        # 备份现有部署
        if [ -d "$PROJECT_DIR/.git" ]; then
          echo "📦 备份现有部署..."
          cp -r "$PROJECT_DIR" "$BACKUP_DIR"
          echo "✅ 备份完成: $BACKUP_DIR"
        fi
        
        # 进入项目目录
        cd "$PROJECT_DIR"
        
        # 克隆或更新代码
        if [ -d ".git" ]; then
          echo "📦 更新现有Git仓库..."
          if git fetch origin && git reset --hard origin/main && git clean -fd; then
            echo "✅ 代码更新成功"
          else
            echo "❌ Git更新失败，尝试重新克隆..."
            cd ..
            rm -rf "$PROJECT_DIR"
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY .
          fi
        else
          echo "📦 初始化Git仓库..."
          # 确保目录为空
          if [ "$(ls -A . 2>/dev/null)" ]; then
            echo "⚠️  目录不为空，清理现有文件..."
            find . -maxdepth 1 -not -name '.' -not -name '..' -exec rm -rf {} + 2>/dev/null || true
          fi
          echo "🔄 克隆代码仓库..."
          # 使用带Token的HTTPS地址进行克隆
          for i in {1..3}; do
            if git clone https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY .; then
              echo "✅ 代码克隆成功"
              break
            else
              echo "❌ 克隆失败，尝试第 $i 次重试..."
              sleep 5
              if [ $i -eq 3 ]; then
                echo "❌ 代码克隆最终失败"
                exit 1
              fi
            fi
          done
        fi
        
        # 创建环境变量文件
        echo "🔧 配置环境变量..."
        cat > .env << EOF
        # 服务器配置
        SERVER_IP=$SERVER_IP
        SERVER_USER=root
        SERVER_SSH_PORT=22
        SERVER_PORT=22
        # AI 服务配置
        SILICONFLOW_API_KEY=$SILICONFLOW_API_KEY
        SILICONFLOW_DEFAULT_MODEL=deepseek-ai/DeepSeek-V3
        SILICONFLOW_API_URL=https://api.siliconflow.cn/v1/chat/completions
        JWT_SECRET_KEY=$JWT_SECRET_KEY
        # MCP 服务配置
        MCP_SERVER_NAME=novel-ai-server
        MCP_SERVER_PORT=8000
        MCP_SERVER_HOST=$SERVER_IP
        MCP_TOOLS_ENABLED=true
        MCP_TOOLS_LIST=novel_generation,character_creation,plot_analysis,content_review,style_transfer
        NOVEL_GENERATION_MAX_TOKENS=4096
        NOVEL_GENERATION_TEMPERATURE=0.8
        NOVEL_GENERATION_TOP_P=0.9
        # 云数据库配置 - 使用内网 IP
        MONGODB_HOST=172.16.32.2
        MONGODB_PORT=27017
        MONGODB_DATABASE=ai_novel_db
        REDIS_HOST=172.16.32.2
        REDIS_PORT=6379
        REDIS_PASSWORD=$REDIS_PASSWORD
        # MySQL 数据库配置
        DATABASE_PORT=3306
        DATABASE_SYSTEMHOST=172.16.16.3
        DATABASE_SYSTEM=novel_data
        DATABASE_USER=lkr
        DATABASE_PASSWORD=Lekairong350702
        DATABASE_NOVELHOST=172.16.16.2
        DATABASE_NOVELDATA=novel_user_data
        DATABASE_NOVELUSER=novel_data_user
        DATABASE_NOVELUSER_PASSWORD=Lekairong350702
        EOF
        
        echo "🔍 验证云数据库配置..."
        echo "MongoDB: 172.16.32.2:27017/ai_novel_db"
        echo "MySQL系统库: 172.16.16.3:3306/novel_data"
        echo "MySQL用户库: 172.16.16.2:3306/novel_user_data"
        echo "Redis: 172.16.32.2:6379"
        
        # 检查数据库服务可达性
        echo "🔍 检查数据库服务可达性..."
        
        # 检查 MongoDB
        if timeout 10 bash -c "echo > /dev/tcp/172.16.32.2/27017" 2>/dev/null; then
          echo "✅ MongoDB (172.16.32.2:27017) 可连接"
        else
          echo "❌ MongoDB (172.16.32.2:27017) 连接失败"
          echo "请检查："
          echo "1. MongoDB 服务是否启动: sudo systemctl status mongod"
          echo "2. MongoDB 绑定地址: grep bindIp /etc/mongod.conf"
          echo "3. 防火墙设置: sudo ufw status | grep 27017"
          echo "4. 端口监听: netstat -tlnp | grep 27017"
        fi
        
        # 检查 Redis
        if timeout 10 bash -c "echo > /dev/tcp/172.16.32.2/6379" 2>/dev/null; then
          echo "✅ Redis (172.16.32.2:6379) 可连接"
        else
          echo "❌ Redis (172.16.32.2:6379) 连接失败"
        fi
        
        # 检查 MySQL
        if timeout 10 bash -c "echo > /dev/tcp/172.16.16.3/3306" 2>/dev/null; then
          echo "✅ MySQL 系统库 (172.16.16.3:3306) 可连接"
        else
          echo "❌ MySQL 系统库连接失败"
        fi
        
        if timeout 10 bash -c "echo > /dev/tcp/172.16.16.2/3306" 2>/dev/null; then
          echo "✅ MySQL 用户库 (172.16.16.2:3306) 可连接"
        else
          echo "❌ MySQL 用户库连接失败"
        fi
        
        # 提升 MongoDB vm.max_map_count 参数（虽然用云数据库，但保留以防万一）
        echo "⚙️  提升 MongoDB vm.max_map_count 参数..."
        sudo sysctl -w vm.max_map_count=1677720
        echo "✅ vm.max_map_count 已设置为 1677720"
        
        # 设置脚本权限
        chmod +x scripts/*.sh || true
        
        # 停止现有服务
        echo "🛑 停止现有服务..."
        docker-compose down || true
        
        # 清理Docker缓存
        echo "🧹 清理Docker缓存..."
        docker system prune -f || true
        
        # 构建和启动服务
        echo "🔧 构建和启动服务..."
        docker-compose build --no-cache
        
        echo "🚀 启动服务..."
        docker-compose up -d
        
        echo "⏳ 等待服务启动..."
        sleep 60
        
        # 检查服务健康状态
        echo "🔍 检查服务健康状态..."
        for i in {1..10}; do
            echo "⏳ 等待后端服务启动... ($i/10)"
            if curl -f http://localhost:8000/health 2>/dev/null; then
                echo "✅ 后端服务启动成功"
                break
            else
                if [ $i -eq 5 ] || [ $i -eq 10 ]; then
                    echo "📋 检查容器状态..."
                    docker-compose ps
                    echo "📋 检查后端日志..."
                    docker-compose logs --tail=20 backend
                fi
                sleep 15
            fi
            
            if [ $i -eq 10 ]; then
                echo "❌ 后端服务启动失败"
                docker-compose logs backend
                exit 1
            fi
        done
        
        echo "✅ 部署完成！"
        SCRIPT_EOF
        
        # 执行部署脚本
        scp deploy_script.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
          "export SERVER_IP='$SERVER_IP' && \
           export SILICONFLOW_API_KEY='$SILICONFLOW_API_KEY' && \
           export JWT_SECRET_KEY='$JWT_SECRET_KEY' && \
           export REDIS_PASSWORD='$REDIS_PASSWORD' && \
           export GITHUB_TOKEN='$GITHUB_TOKEN' && \
           export GITHUB_REPOSITORY='${{ github.repository }}' && \
           chmod +x /tmp/deploy_script.sh && \
           bash /tmp/deploy_script.sh"
        
    - name: Wait for services to start
      run: |
        echo "⏳ 等待服务启动..."
        sleep 60
        
    - name: Health check
      run: |
        echo "🔍 执行健康检查..."
        
        # 检查前端服务
        if curl -f --max-time 30 http://${{ secrets.SERVER_IP }}:80; then
          echo "✅ 前端服务正常"
        else
          echo "❌ 前端服务异常"
          exit 1
        fi
        
        # 检查后端API
        if curl -f --max-time 30 http://${{ secrets.SERVER_IP }}:8000/health; then
          echo "✅ 后端API正常"
        else
          echo "❌ 后端API异常"
          exit 1
        fi
        
    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 部署成功！"
          echo "🌐 前端地址: http://${{ secrets.SERVER_IP }}:80"
          echo "🔧 后端API: http://${{ secrets.SERVER_IP }}:8000"
          echo "📚 API文档: http://${{ secrets.SERVER_IP }}:8000/docs"
        else
          echo "❌ 部署失败！"
        fi