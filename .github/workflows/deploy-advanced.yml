name: Deploy AI Novel Editor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_NAME: ai-novel-editor
  DEPLOY_DIR: /opt/ai-novel-editor

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout private repository
      uses: actions/checkout@v4
      with:
        ssh-key: ${{ secrets.DEPLOY_SSH_KEY }}
        ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
        ssh-strict: false
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run Python linting
      run: |
        cd backend
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        echo "📦 准备安装前端依赖..."
        echo "=== 当前目录内容 ==="
        ls -la
        
        echo "=== 检查 package.json ==="
        if [ -f "package.json" ]; then
          echo "✅ package.json 存在"
          cat package.json | head -10
        else
          echo "❌ package.json 不存在"
          exit 1
        fi
        
        echo "=== 检查 package-lock.json ==="
        if [ -f "package-lock.json" ]; then
          echo "✅ package-lock.json 存在"
          echo "文件大小: $(wc -c < package-lock.json) 字节"
          echo "lockfileVersion: $(grep -o '"lockfileVersion": [0-9]*' package-lock.json | head -1)"
        else
          echo "❌ package-lock.json 不存在，将使用 npm install"
        fi
        
        echo "=== 检查 Node.js 和 npm 版本 ==="
        echo "Node.js: $(node --version)"
        echo "npm: $(npm --version)"
        
        echo "📦 尝试使用 npm ci 安装依赖..."
        if npm ci --verbose; then
          echo "✅ npm ci 安装成功"
        else
          echo "❌ npm ci 失败，尝试使用 npm install..."
          echo "=== 清理可能的损坏状态 ==="
          rm -rf node_modules package-lock.json
          echo "=== 使用 npm install 重新安装和生成 lock 文件 ==="
          npm install --verbose
          echo "✅ npm install 安装成功"
        fi
        
        echo "=== 验证依赖安装 ==="
        if [ -d "node_modules" ]; then
          echo "✅ node_modules 目录存在"
          echo "已安装包数量: $(find node_modules -maxdepth 1 -type d | wc -l)"
        else
          echo "❌ node_modules 目录不存在"
          exit 1
        fi
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

  # 配置验证和基础测试
  config-validation:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout private repository
      uses: actions/checkout@v4
      with:
        ssh-key: ${{ secrets.DEPLOY_SSH_KEY }}
        ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
        ssh-strict: false
      
    - name: Install docker-compose
      run: sudo apt-get update && sudo apt-get install -y docker-compose
        
    - name: Validate Docker Compose configuration
      run: |
        echo "🔍 验证 Docker Compose 配置..."
        
        # 检查开发环境配置
        if [ -f "docker-compose.yml" ]; then
          echo "✅ 发现开发环境配置文件"
          if docker-compose config > /dev/null; then
            echo "✅ 开发环境配置语法正确"
          else
            echo "❌ 开发环境配置语法错误"
            exit 1
          fi
        fi
        
        # 检查生产环境配置
        if [ -f "docker-compose.production.yml" ]; then
          echo "✅ 发现生产环境配置文件"
          if docker-compose -f docker-compose.production.yml config > /dev/null; then
            echo "✅ 生产环境配置语法正确"
          else
            echo "❌ 生产环境配置语法错误"
            exit 1
          fi
        else
          echo "❌ 生产环境配置文件缺失"
          exit 1
        fi
        
        # 验证网络配置
        echo "🔍 验证网络配置..."
        if docker-compose -f docker-compose.production.yml config | grep -A 3 "networks:" | grep -q "app-network"; then
          echo "✅ 发现 app-network 配置"
        else
          echo "❌ app-network 配置缺失"
          exit 1
        fi
        
    - name: Validate Dockerfiles
      run: |
        echo "🔍 验证 Dockerfile 配置..."
        
        # 检查后端 Dockerfile
        if [ -f "backend/Dockerfile" ]; then
          echo "✅ 后端 Dockerfile 存在"
        else
          echo "❌ 后端 Dockerfile 缺失"
          exit 1
        fi
        
        # 检查前端 Dockerfile
        if [ -f "frontend/Dockerfile" ]; then
          echo "✅ 前端 Dockerfile 存在"
        else
          echo "❌ 前端 Dockerfile 缺失"
          exit 1
        fi
        
    - name: Validate deployment scripts
      run: |
        echo "🔍 验证部署脚本..."
        
        # 检查脚本文件存在性
        for script in scripts/*.sh; do
          if [ -f "$script" ]; then
            echo "✅ 发现脚本: $script"
            # 检查脚本语法
            if bash -n "$script"; then
              echo "✅ 脚本语法正确: $script"
            else
              echo "❌ 脚本语法错误: $script"
              exit 1
            fi
          fi
        done
        
        echo "✅ 所有配置验证通过，可以进行部署"

  # 部署到生产环境
  deploy:
    needs: quality-check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: 🚀 Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          echo "🚀 开始部署 AI 小说编辑器..."
          
          # 设置环境变量
          export SERVER_IP="${{ secrets.SERVER_IP }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export FORCE_LOCAL_DEPLOY=true
          
          # 1. 立即修复 DNS（第一优先级）
          echo "🌐 立即修复 DNS 配置..."
          sudo bash -c 'echo -e "nameserver 180.76.76.76\nnameserver 223.5.5.5" > /etc/resolv.conf'
          echo "✅ DNS 已设置为百度和阿里云 DNS"
          
          # 2. 彻底清理 systemd 冲突（第二优先级）
          echo "🧹 彻底清理 systemd 服务冲突..."
          
          # 停止所有可能冲突的服务
          for service in ai-novel-editor ai-novel-editor.service novel-editor backend frontend; do
            if systemctl list-unit-files | grep -q "^$service"; then
              echo "🛑 停止服务: $service"
              sudo systemctl stop $service 2>/dev/null || true
              sudo systemctl disable $service 2>/dev/null || true
            fi
            
            # 强制停止正在运行的服务
            if systemctl is-active --quiet $service 2>/dev/null; then
              echo "🛑 强制停止: $service"
              sudo systemctl stop $service || true
            fi
            
            # 移除服务文件
            for path in /etc/systemd/system /lib/systemd/system /usr/lib/systemd/system; do
              if [ -f "$path/$service" ]; then
                echo "🗑️ 移除: $path/$service"
                sudo rm -f "$path/$service"
              fi
            done
          done
          
          # 重新加载 systemd
          sudo systemctl daemon-reload || true
          sudo systemctl reset-failed || true
          echo "✅ systemd 清理完成"
          
          # 3. 验证网络连通性
          echo "� 验证网络连通性..."
          if nslookup github.com > /dev/null 2>&1; then
            echo "✅ 网络连通性正常"
          else
            echo "❌ 网络连通性异常，尝试其他 DNS..."
            sudo bash -c 'echo -e "nameserver 8.8.8.8\nnameserver 114.114.114.114" > /etc/resolv.conf'
          fi
          
          # 4. 下载并执行修复版部署脚本
          echo "📥 下载修复版部署脚本..."
          cd /tmp
          rm -f quick-deploy.sh
          
          if curl -fsSL https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/scripts/quick-deploy.sh -o quick-deploy.sh; then
            echo "✅ 部署脚本下载成功"
            chmod +x quick-deploy.sh
            
            # 执行部署（强制本地部署模式）
            echo "🚀 执行修复版部署脚本（本地部署模式）..."
            FORCE_LOCAL_DEPLOY=true bash quick-deploy.sh
          else
            echo "❌ 部署脚本下载失败"
            exit 1
          fi
          
          # 停止所有可能冲突的服务
          for service in ai-novel-editor ai-novel-editor.service novel-editor backend frontend; do
            if systemctl list-unit-files | grep -q "^$service"; then
              echo "🛑 停止服务: $service"
              sudo systemctl stop $service 2>/dev/null || true
              sudo systemctl disable $service 2>/dev/null || true
            fi
            
            # 强制停止正在运行的服务
            if systemctl is-active --quiet $service 2>/dev/null; then
              echo "🛑 强制停止: $service"
              sudo systemctl stop $service || true
            fi
            
            # 移除服务文件
            for path in /etc/systemd/system /lib/systemd/system /usr/lib/systemd/system; do
              if [ -f "$path/$service" ]; then
                echo "🗑️ 移除: $path/$service"
                sudo rm -f "$path/$service"
              fi
            done
          done
          
          # 重新加载 systemd
          sudo systemctl daemon-reload || true
          sudo systemctl reset-failed || true
          echo "✅ systemd 清理完成"
          
          # 3. 验证网络连通性
          echo "🔍 验证网络连通性..."
          if nslookup github.com > /dev/null 2>&1; then
            echo "✅ 网络连通性正常"
          else
            echo "❌ 网络连通性异常，尝试其他 DNS..."
            sudo bash -c 'echo -e "nameserver 8.8.8.8\nnameserver 114.114.114.114" > /etc/resolv.conf'
          fi
          
          # 4. 下载并执行修复版部署脚本
          echo "📥 下载修复版部署脚本..."
          cd /tmp
          rm -f quick-deploy.sh
          
          if curl -fsSL https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/scripts/quick-deploy.sh -o quick-deploy.sh; then
            echo "✅ 部署脚本下载成功"
            chmod +x quick-deploy.sh
            
            # 执行部署
            echo "🚀 执行修复版部署脚本..."
            bash quick-deploy.sh
          else
            echo "❌ 部署脚本下载失败"
            exit 1
          fi

    - name: Health check
      run: |
        echo "🔍 执行健康检查..."
        
        # 等待服务启动
        echo "⏳ 等待服务启动..."
        sleep 60
        
        # 下载健康检查脚本
        cd /tmp
        if curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/health-check.sh -o health-check.sh; then
          echo "✅ 健康检查脚本下载成功"
          chmod +x health-check.sh
          
          # 执行健康检查
          echo "🚀 执行健康检查..."
          bash health-check.sh
        else
          echo "❌ 健康检查脚本下载失败，使用简单检查"
          
          # 简单健康检查
          echo "🔍 简单前端检查..."
          if curl -f --max-time 30 http://localhost:80; then
            echo "✅ 前端服务正常"
          else
            echo "❌ 前端服务异常"
            exit 1
          fi
          
          echo "🔍 简单后端检查..."
          if curl -f --max-time 30 http://localhost:8000/health; then
            echo "✅ 后端API正常"
          else
            echo "❌ 后端API异常"
            exit 1
          fi
        fi
        
    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 部署成功！"
          echo "🌐 前端地址: http://${{ secrets.SERVER_IP }}:80"
          echo "🔧 后端API: http://${{ secrets.SERVER_IP }}:8000"
          echo "📚 API文档: http://${{ secrets.SERVER_IP }}:8000/docs"
        else
          echo "❌ 部署失败！"
        fi