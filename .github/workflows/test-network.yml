name: Test Network Detection

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test-network:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: |
        echo "📦 安装依赖..."
        # 前端依赖
        cd frontend && npm ci
        cd ..
        
        # 后端依赖  
        cd backend && npm ci
        cd ..
        
    - name: Build Docker images
      run: |
        echo "🔨 构建Docker镜像..."
        docker-compose build --no-cache
        
    - name: Test network detection script
      run: |
        echo "🔍 测试智能网络检测脚本..."
        
        # 确保脚本可执行
        chmod +x scripts/detect-network.sh
        
        echo "=== 原始环境信息 ==="
        echo "当前目录: $PWD"
        echo "目录名: $(basename $PWD)"
        echo "工作空间: $GITHUB_WORKSPACE"
        
        echo "=== 创建测试网络 ==="
        # 启动服务以创建网络
        docker-compose up -d --no-deps mongodb redis
        sleep 10
        
        echo "=== 当前网络状态 ==="
        docker network ls
        
        echo "=== 执行智能网络检测 ==="
        if bash scripts/detect-network.sh; then
          echo "✅ 网络检测成功"
          
          # 显示检测结果
          if [ -f /tmp/detected_network.env ]; then
            echo "=== 检测结果 ==="
            cat /tmp/detected_network.env
            
            # 加载并验证
            source /tmp/detected_network.env
            echo "检测到的网络名: $DETECTED_NETWORK_NAME"
            
            # 验证网络是否真实存在
            if docker network inspect "$DETECTED_NETWORK_NAME" >/dev/null 2>&1; then
              echo "✅ 检测到的网络确实存在"
              
              # 显示网络详情
              echo "=== 网络详情 ==="
              docker network inspect "$DETECTED_NETWORK_NAME" | jq '.[0] | {Name, Driver, Scope, Containers}' 2>/dev/null || docker network inspect "$DETECTED_NETWORK_NAME" | head -20
            else
              echo "❌ 检测到的网络不存在"
              exit 1
            fi
          else
            echo "❌ 未生成检测结果文件"
            exit 1
          fi
        else
          echo "❌ 网络检测失败"
          echo "=== 调试信息 ==="
          bash scripts/detect-network.sh || true
          exit 1
        fi
        
    - name: Test services with detected network
      run: |
        echo "🚀 使用检测到的网络测试服务..."
        
        # 加载网络检测结果
        if [ -f /tmp/detected_network.env ]; then
          source /tmp/detected_network.env
          echo "使用网络: $DETECTED_NETWORK_NAME"
        else
          echo "❌ 网络检测结果不可用"
          exit 1
        fi
        
        # 启动完整服务栈
        echo "🚀 启动完整应用栈..."
        docker-compose up -d
        
        echo "⏳ 等待服务就绪..."
        sleep 30
        
        echo "=== 服务状态检查 ==="
        docker-compose ps
        
        echo "=== 健康检查 ==="
        # 检查 MongoDB
        if docker-compose exec -T mongodb mongosh --eval "db.adminCommand('ping')" 2>/dev/null; then
          echo "✅ MongoDB 健康检查通过"
        else
          echo "❌ MongoDB 健康检查失败"
        fi
        
        # 检查 Redis
        if docker-compose exec -T redis redis-cli ping 2>/dev/null; then
          echo "✅ Redis 健康检查通过"
        else
          echo "❌ Redis 健康检查失败"
        fi
        
        echo "=== 网络连通性测试 ==="
        # 测试容器间网络通信
        echo "🔍 测试容器间网络通信..."
        
        # 从后端容器测试到 MongoDB
        if docker-compose exec -T backend nslookup mongodb 2>/dev/null; then
          echo "✅ 后端可以解析 MongoDB 服务名"
        else
          echo "❌ 后端无法解析 MongoDB 服务名"
        fi
        
        # 从后端容器测试到 Redis
        if docker-compose exec -T backend nslookup redis 2>/dev/null; then
          echo "✅ 后端可以解析 Redis 服务名"
        else
          echo "❌ 后端无法解析 Redis 服务名"
        fi
        
        # 测试网络连接详情
        echo "=== 容器网络详情 ==="
        docker network inspect "$DETECTED_NETWORK_NAME" | jq '.[0] | {Name, Containers}' 2>/dev/null || docker network inspect "$DETECTED_NETWORK_NAME" | grep -A 20 '"Containers"'
        
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 清理测试环境..."
        docker-compose down -v --remove-orphans || true
        docker system prune -f || true
